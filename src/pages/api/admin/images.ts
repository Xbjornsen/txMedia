
/**
 * API Endpoint: admin/images
 * Generated by TxMedia API Generator
 * 
 * Authentication: nextauth
 * Database: Prisma
 */

interface RequestBody {
  // Define your request body interface here
}

interface ResponseData {
  // Define your response data interface here
}
import { NextApiRequest, NextApiResponse } from 'next'
import { getSession } from 'next-auth/react'
import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

export const config = {
  api: {
    bodyParser: {
      sizeLimit: '50mb'
    }
  }
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' })
  }

  try {
    const session = await getSession({ req })
    
    if (!session || (session.user as any)?.type !== 'admin') {
      return res.status(401).json({ message: 'Unauthorized' })
    }

    // Handle multipart form data upload
    const { files, gallerySlug } = req.body // Implement proper file parsing

    if (!files || files.length === 0) {
      return res.status(400).json({ message: 'No files provided' })
    }

    if (!gallerySlug) {
      return res.status(400).json({ message: 'Gallery slug is required' })
    }

    // Find gallery
    
    const gallery = await prisma.gallery.findUnique({
      where: {
      slug: gallerySlug
},
    })

    if (!gallery) {
      return res.status(404).json({ message: 'Gallery not found' })
    }

    const uploadedImages = []
    const galleryDir = path.join(process.cwd(), 'public', 'galleries', gallerySlug)
    const thumbnailDir = path.join(galleryDir, 'thumbnails')

    // Ensure directories exist
    if (!fs.existsSync(galleryDir)) {
      fs.mkdirSync(galleryDir, { recursive: true })
    }
    if (!fs.existsSync(thumbnailDir)) {
      fs.mkdirSync(thumbnailDir, { recursive: true })
    }

    // Process each file
    for (const file of files) {
      // Implement file processing logic
      const fileName = `${Date.now()}-${file.originalName}`
      const filePath = path.join(galleryDir, fileName)
      
      // Save file logic here
      
      // Create database record
      
      const image = await prisma.galleryImage.create({
        data: {
          fileName,
          originalName: file.originalName,
          filePath: `/galleries/${gallerySlug}/${fileName}`,
          fileSize: file.size,
          width: 0, // Get from image processing
          height: 0, // Get from image processing
          galleryId: gallery.id
        }
      })
      
      uploadedImages.push(image)
    }

    res.status(200).json({
      message: 'Images uploaded successfully',
      images: uploadedImages,
      count: uploadedImages.length
    })

  } catch (error) {
    console.error('admin images error:', error)
    res.status(500).json({ message: 'Internal server error' })
  }
}


function getClientIP(req: NextApiRequest): string {
  const forwarded = req.headers['x-forwarded-for']
  const ip = forwarded 
    ? (Array.isArray(forwarded) ? forwarded[0] : forwarded.split(',')[0])
    : req.socket.remoteAddress || 'unknown'
  return ip
}