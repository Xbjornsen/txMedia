name: Deployment Checker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: true
        default: 'full'
        type: choice
        options:
        - pre-deploy
        - full
        - security
        - performance
        - api-test

jobs:
  pre-deployment-check:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET || 'test-secret-for-ci-minimum-32-chars-long' }}" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL || 'postgresql://test:test@localhost:5432/testdb' }}" >> .env
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL || 'admin@test.com' }}" >> .env
        echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD || 'testpassword123' }}" >> .env
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      run: |
        # For CI, we'll use a simple SQLite setup
        echo "DATABASE_URL=\"file:./test.db\"" > .env.test
        npx prisma generate
        npx prisma db push --force-reset
        
    - name: Run pre-deployment checks
      run: npm run deploy:check
      env:
        NODE_ENV: test
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-report-${{ matrix.node-version }}
        path: deployment-report.json
        retention-days: 30

  build-check:
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=\"file:./test.db\"" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        npx prisma db push --force-reset
        
    - name: Run build monitoring
      run: npm run deploy:check:build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts
        path: |
          .next/
          deployment-report.json
        retention-days: 7

  security-check:
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=\"file:./test.db\"" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        npx prisma db push --force-reset
        
    - name: Run security checks
      run: npm run deploy:check:security
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: deployment-report.json
        retention-days: 30

  api-test:
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, build-check]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        npx prisma db push --force-reset
        
    - name: Run API tests
      run: npm run deploy:check:api
      
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: deployment-report.json
        retention-days: 30

  photography-check:
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=\"file:./test.db\"" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        npx prisma db push --force-reset
        
    - name: Run photography app checks
      run: npm run deploy:check:photography
      
    - name: Upload photography check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: photography-check-results
        path: deployment-report.json
        retention-days: 30

  performance-check:
    runs-on: ubuntu-latest
    needs: build-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=\"file:./test.db\"" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        npx prisma db push --force-reset
        
    - name: Build application
      run: npm run build
      
    - name: Run performance checks
      run: npm run deploy:check:performance
      
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: deployment-report.json
        retention-days: 30

  deployment-summary:
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, build-check, security-check, api-test, photography-check, performance-check]
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4
      
    - name: Create deployment summary
      run: |
        echo "# Deployment Check Summary" > deployment-summary.md
        echo "" >> deployment-summary.md
        echo "## Results Overview" >> deployment-summary.md
        echo "" >> deployment-summary.md
        
        if [ -f deployment-report-20.x/deployment-report.json ]; then
          echo "✅ Pre-deployment checks completed" >> deployment-summary.md
        else
          echo "❌ Pre-deployment checks failed" >> deployment-summary.md
        fi
        
        if [ -f build-artifacts/deployment-report.json ]; then
          echo "✅ Build monitoring completed" >> deployment-summary.md
        else
          echo "❌ Build monitoring failed" >> deployment-summary.md
        fi
        
        if [ -f security-report/deployment-report.json ]; then
          echo "✅ Security checks completed" >> deployment-summary.md
        else
          echo "❌ Security checks failed" >> deployment-summary.md
        fi
        
        if [ -f api-test-results/deployment-report.json ]; then
          echo "✅ API tests completed" >> deployment-summary.md
        else
          echo "❌ API tests failed" >> deployment-summary.md
        fi
        
        if [ -f photography-check-results/deployment-report.json ]; then
          echo "✅ Photography app checks completed" >> deployment-summary.md
        else
          echo "❌ Photography app checks failed" >> deployment-summary.md
        fi
        
        if [ -f performance-report/deployment-report.json ]; then
          echo "✅ Performance checks completed" >> deployment-summary.md
        else
          echo "❌ Performance checks failed" >> deployment-summary.md
        fi
        
        echo "" >> deployment-summary.md
        echo "## Deployment Readiness" >> deployment-summary.md
        echo "" >> deployment-summary.md
        
        # Count successful jobs
        SUCCESS_COUNT=0
        TOTAL_COUNT=6
        
        [ -f deployment-report-20.x/deployment-report.json ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ -f build-artifacts/deployment-report.json ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ -f security-report/deployment-report.json ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ -f api-test-results/deployment-report.json ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ -f photography-check-results/deployment-report.json ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ -f performance-report/deployment-report.json ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        
        if [ $SUCCESS_COUNT -eq $TOTAL_COUNT ]; then
          echo "🎉 **READY FOR DEPLOYMENT** - All checks passed ($SUCCESS_COUNT/$TOTAL_COUNT)" >> deployment-summary.md
        elif [ $SUCCESS_COUNT -gt 4 ]; then
          echo "⚠️ **DEPLOYMENT WITH CAUTION** - Most checks passed ($SUCCESS_COUNT/$TOTAL_COUNT)" >> deployment-summary.md
        else
          echo "🚫 **DEPLOYMENT BLOCKED** - Critical checks failed ($SUCCESS_COUNT/$TOTAL_COUNT)" >> deployment-summary.md
        fi
        
        echo "" >> deployment-summary.md
        echo "## Next Steps" >> deployment-summary.md
        echo "" >> deployment-summary.md
        echo "1. Review individual check reports for detailed findings" >> deployment-summary.md
        echo "2. Address any critical issues found" >> deployment-summary.md
        echo "3. Run full deployment checker locally: \`npm run deploy:check:full\`" >> deployment-summary.md
        echo "4. If all checks pass, proceed with deployment" >> deployment-summary.md
        
        cat deployment-summary.md
        
    - name: Upload deployment summary
      uses: actions/upload-artifact@v4
      with:
        name: deployment-summary
        path: deployment-summary.md
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('deployment-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });