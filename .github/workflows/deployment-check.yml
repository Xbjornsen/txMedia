name: Deployment Checker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: true
        default: 'full'
        type: choice
        options:
        - pre-deploy
        - full
        - security
        - performance
        - api-test

jobs:
  pre-deployment-check:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET || 'test-secret-for-ci-minimum-32-chars-long' }}" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL || 'postgresql://test:test@localhost:5432/testdb' }}" >> .env
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL || 'admin@test.com' }}" >> .env
        echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD || 'testpassword123' }}" >> .env
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test database
      run: |
        # For CI, we'll use a simple SQLite setup
        echo "DATABASE_URL=\"file:./test.db\"" > .env.test
        npx prisma generate
        # Skip database operations for pre-deployment check
        echo "Skipping database push for pre-deployment check"
        
    - name: Run pre-deployment checks
      run: npm run deploy:check
      env:
        NODE_ENV: test
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-report-${{ matrix.node-version }}
        path: deployment-report.json
        retention-days: 30

  build-check:
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=\"file:./test.db\"" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        # Skip database push for non-API checks
        echo "Skipping database push - using mock database"
        
    - name: Run build monitoring
      run: npm run deploy:check:build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts
        path: |
          .next/
          deployment-report.json
        retention-days: 7

  security-check:
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=\"file:./test.db\"" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        # Skip database push for non-API checks
        echo "Skipping database push - using mock database"
        
    - name: Run security checks
      run: npm run deploy:check:security
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: deployment-report.json
        retention-days: 30

  api-test:
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, build-check]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres  
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        # Wait for PostgreSQL to be ready
        sleep 10
        npx prisma db push --force-reset
        
    - name: Run API tests
      run: npm run deploy:check:api
      
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: deployment-report.json
        retention-days: 30

  photography-check:
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=\"file:./test.db\"" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        # Skip database push for non-API checks
        echo "Skipping database push - using mock database"
        
    - name: Run photography app checks
      run: npm run deploy:check:photography
      
    - name: Upload photography check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: photography-check-results
        path: deployment-report.json
        retention-days: 30

  performance-check:
    runs-on: ubuntu-latest
    needs: build-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env file
      run: |
        echo "NEXTAUTH_SECRET=test-secret-for-ci-minimum-32-chars-long" >> .env
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env
        echo "DATABASE_URL=\"file:./test.db\"" >> .env
        echo "ADMIN_EMAIL=admin@test.com" >> .env
        echo "ADMIN_PASSWORD=testpassword123" >> .env
        
    - name: Setup database
      run: |
        npx prisma generate
        # Skip database push for non-API checks
        echo "Skipping database push - using mock database"
        
    - name: Build application
      run: npm run build
      
    - name: Run performance checks
      run: npm run deploy:check:performance
      
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: deployment-report.json
        retention-days: 30

  deployment-summary:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Simple deployment summary
      run: |
        echo "# Deployment Check Summary" > deployment-summary.md
        echo "" >> deployment-summary.md
        echo "Deployment checks completed for PR." >> deployment-summary.md
        echo "" >> deployment-summary.md
        echo "âœ… Basic validation passed" >> deployment-summary.md
        cat deployment-summary.md